// Generated by JavaCPP version 1.5.4: DO NOT EDIT THIS FILE

#define ENABLE_OPENGL_INTEROP
#define WIN32
#define OS_WIN
#define VK_ENABLE_BETA_EXTENSIONS
#define VK_USE_PLATFORM_WIN32_KHR
#define SHARED_PTR_NAMESPACE std
#define UNIQUE_PTR_NAMESPACE std
#define VKT_ENABLE_GLFW_SUPPORT

#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__) && !defined(__ANDROID__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef __ANDROID__
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif

#ifdef __linux__
    #include <malloc.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/sysinfo.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <link.h>
    #include <pthread.h>
#elif defined(__APPLE__)
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <mach/mach_init.h>
    #include <mach/mach_host.h>
    #include <mach/task.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
    #include <pthread.h>
#elif defined(_WIN32) && !defined(NO_WINDOWS_H)
    #define NOMINMAX
    #include <windows.h>
    #include <psapi.h>
#elif defined(_WIN32)
    extern "C" unsigned long __stdcall GetCurrentThreadId();
#endif

#if defined(__ANDROID__) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline)) __attribute__ ((unused))
    #define JavaCPP_hidden   __attribute__((visibility("hidden"))) __attribute__ ((unused))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif
#if __cplusplus >= 201103L || _MSC_VER >= 1900
    #define JavaCPP_override override
#else
    #define JavaCPP_override
#endif

#include "./include/vkt3/fw.hpp"
#include "./include/stdafx.h"

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[47] = {
        "org/bytedeco/javacpp/Pointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "com/helixd2s/valera/ValerACore$Framebuffer",
        "java/lang/RuntimeException",
        "com/helixd2s/valera/ValerACore$PipelineLayout",
        "com/helixd2s/valera/ValerACore$Rasterization",
        "com/helixd2s/valera/ValerACore$RayTracing",
        "com/helixd2s/valera/ValerACore$BuildCommand",
        "com/helixd2s/valera/ValerACore$RenderCommand",
        "com/helixd2s/valera/ValerACore$SamplerSet",
        "com/helixd2s/valera/ValerACore$TextureSet",
        "com/helixd2s/valera/ValerACore$BufferViewSet",
        "com/helixd2s/valera/ValerACore$Background",
        "com/helixd2s/valera/ValerACore$GeometrySet",
        "com/helixd2s/valera/ValerACore$Geometry",
        "com/helixd2s/valera/ValerACore$Acceleration",
        "com/helixd2s/valera/ValerACore$VertexSet",
        "com/helixd2s/valera/ValerACore$SetBase",
        "com/helixd2s/valera/ValerACore$RayTracingCreateInfo",
        "java/lang/NullPointerException",
        "com/helixd2s/valera/ValerACore$Constants",
        "com/helixd2s/valera/ValerACore$PipelineCreateInfo",
        "com/helixd2s/valera/ValerACore$PipelineStages",
        "com/helixd2s/valera/ValerACore$InstanceSet",
        "com/helixd2s/valera/ValerACore$ConstantDesc",
        "org/bytedeco/javacpp/FloatPointer",
        "org/bytedeco/javacpp/IntPointer",
        "com/helixd2s/valera/ValerACore$GeometryDesc",
        "org/bytedeco/javacpp/BytePointer",
        "com/helixd2s/valera/ValerACore$VsGeometryInstance",
        "org/bytedeco/javacpp/LongPointer",
        "com/helixd2s/valera/ValerACore$BuildCommandCreateInfo",
        "com/helixd2s/valera/ValerACore$RenderCommandCreateInfo",
        "com/helixd2s/valera/ValerACore$VertexSetCreateInfo",
        "com/helixd2s/valera/ValerACore$AttributeSet",
        "com/helixd2s/valera/ValerACore$BindingSet",
        "com/helixd2s/valera/ValerACore$DataSetCreateInfo",
        "com/helixd2s/valera/ValerACore$AccelerationCreateInfo",
        "com/helixd2s/valera/ValerACore$MaterialUnit",
        "com/helixd2s/valera/ValerACore$Driver",
        "com/helixd2s/valera/VKt$Instance",
        "com/helixd2s/valera/VKt$Driver",
        "com/helixd2s/valera/VKt$Device" };
static jclass JavaCPP_classes[47] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_arrayOffsetMID = NULL;
static jfieldID JavaCPP_bufferPositionFID = NULL;
static jfieldID JavaCPP_bufferLimitFID = NULL;
static jfieldID JavaCPP_bufferCapacityFID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef __ANDROID__
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
#endif
    va_end(ap);
}

#ifdef __ANDROID__
    static pthread_key_t JavaCPP_current_env;
    static JavaCPP_noinline void JavaCPP_detach_env(void *data)
    {
        if (JavaCPP_vm) {
            JavaCPP_vm->DetachCurrentThread();
        }
    }
    static JavaCPP_noinline void JavaCPP_create_pthread_key(void)
    {
        pthread_key_create(&JavaCPP_current_env, JavaCPP_detach_env);
    }
#endif

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, jlong size, void* owner, void (*deallocator)(void*)) {
    if (owner != NULL && deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

static JavaCPP_noinline jstring JavaCPP_createString(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    size_t length = strlen(ptr);
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
    return (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringMID, bytes);
#endif
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
#ifndef GENERIC_EXCEPTION_TOSTRING
#define GENERIC_EXCEPTION_TOSTRING what()
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createString(env, e.GENERIC_EXCEPTION_TOSTRING);
    } catch (...) {
        str = JavaCPP_createString(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

static JavaCPP_noinline void* JavaCPP_getPointerOwner(JNIEnv* env, jobject obj) {
    if (obj != NULL) {
        jobject deallocator = env->GetObjectField(obj, JavaCPP_deallocatorFID);
        if (deallocator != NULL && env->IsInstanceOf(deallocator, JavaCPP_getClass(env, 2))) {
            return jlong_to_ptr(env->GetLongField(deallocator, JavaCPP_ownerAddressFID));
        }
    }
    return NULL;
}

#include <vector>
template<typename P, typename T = P, typename A = std::allocator<T> > class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T,A>::size_type size, void* owner) : ptr((P*)ptr), size(size), owner(owner),
        vec2(ptr ? std::vector<T,A>((P*)ptr, (P*)ptr + size) : std::vector<T,A>()), vec(vec2) { }
    VectorAdapter(const std::vector<T,A>& vec) : ptr(0), size(0), owner(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T,A>& vec) : ptr(0), size(0), owner(0), vec(vec) { }
    VectorAdapter(const std::vector<T,A>* vec) : ptr(0), size(0), owner(0), vec(*(std::vector<T,A>*)vec) { }
    void assign(P* ptr, typename std::vector<T,A>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* owner) { operator delete(owner); }
    operator P*() {
        if (vec.size() > size) {
            ptr = (P*)(operator new(sizeof(P) * vec.size(), std::nothrow_t()));
        }
        if (ptr) {
            std::copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        owner = ptr;
        return ptr;
    }
    operator const P*()        { size = vec.size(); return &vec[0]; }
    operator std::vector<T,A>&() { return vec; }
    operator std::vector<T,A>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T,A>::size_type size;
    void* owner;
    std::vector<T,A> vec2;
    std::vector<T,A>& vec;
};

#include <string>
template<typename T = char> class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const       wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const std::basic_string<T>& str) : ptr(0), size(0), owner(0), str2(str), str(str2) { }
    StringAdapter(      std::basic_string<T>& str) : ptr(0), size(0), owner(0), str(str) { }
    StringAdapter(const std::basic_string<T>* str) : ptr(0), size(0), owner(0), str(*(std::basic_string<T>*)str) { }
    void assign(char* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0);
    }
    void assign(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0);
    }
    void assign(const        wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    static void deallocate(void* owner) { delete[] (T*)owner; }
    operator char*() {
        const char* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) char[str.size()+1];
            if (ptr) memset(ptr, 0, str.size()+1);
        }
        if (ptr && memcmp(ptr, data, str.size()) != 0) {
            memcpy(ptr, data, str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { size = str.size(); return                 str.c_str(); }
    operator const signed   char*() { size = str.size(); return (signed   char*)str.c_str(); }
    operator const unsigned char*() { size = str.size(); return (unsigned char*)str.c_str(); }
    operator wchar_t*() {
        const wchar_t* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) wchar_t[str.size()+1];
            if (ptr) memset(ptr, 0, sizeof(wchar_t) * (str.size()+1));
        }
        if (ptr && memcmp(ptr, data, sizeof(wchar_t) * str.size()) != 0) {
            memcpy(ptr, data, sizeof(wchar_t) * str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator     unsigned   short*() { return (unsigned short*)(operator wchar_t*)(); }
    operator       signed     int*() { return (  signed   int*)(operator wchar_t*)(); }
    operator const        wchar_t*() { size = str.size(); return                  str.c_str(); }
    operator const unsigned short*() { size = str.size(); return (unsigned short*)str.c_str(); }
    operator const   signed   int*() { size = str.size(); return (  signed   int*)str.c_str(); }
    operator         std::basic_string<T>&() { return str; }
    operator         std::basic_string<T>*() { return ptr ? &str : 0; }
    T* ptr;
    typename std::basic_string<T>::size_type size;
    void* owner;
    std::basic_string<T> str2;
    std::basic_string<T>& str;
};

#ifdef SHARED_PTR_NAMESPACE
template<class T> class SharedPtrAdapter {
public:
    typedef SHARED_PTR_NAMESPACE::shared_ptr<T> S;
    SharedPtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            sharedPtr2(owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr)), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(const S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr2(sharedPtr), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(      S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(sharedPtr) { }
    SharedPtrAdapter(const S* sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(*(S*)sharedPtr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->sharedPtr = owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr);
    }
    static void deallocate(void* owner) { delete (S*)owner; }
    operator typename SHARED_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = sharedPtr.get();
        if (owner == NULL || owner == ptr) {
            owner = new S(sharedPtr);
        }
        return (typename SHARED_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator S&() { return sharedPtr; }
    operator S*() { return &sharedPtr; }
    T* ptr;
    size_t size;
    void* owner;
    S sharedPtr2;
    S& sharedPtr;
};
#endif

#ifdef UNIQUE_PTR_NAMESPACE
template<class T, class D = UNIQUE_PTR_NAMESPACE::default_delete<T> > class UniquePtrAdapter {
public:
    typedef UNIQUE_PTR_NAMESPACE::unique_ptr<T,D> U;
    UniquePtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            uniquePtr2(owner != NULL && owner != ptr ? U() : U((T*)ptr)),
            uniquePtr(owner != NULL && owner != ptr ? *(U*)owner : uniquePtr2) { }
    UniquePtrAdapter(U&& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(UNIQUE_PTR_NAMESPACE::move(uniquePtr)), uniquePtr(uniquePtr2) { }
    UniquePtrAdapter(const U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr((U&)uniquePtr) { }
    UniquePtrAdapter(      U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(uniquePtr) { }
    UniquePtrAdapter(const U* uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(*(U*)uniquePtr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->uniquePtr = owner != NULL && owner != ptr ? *(U*)owner : U((T*)ptr);
    }
    static void deallocate(void* owner) { delete (U*)owner; }
    operator typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = uniquePtr.get();
        if (ptr == uniquePtr2.get() && (owner == NULL || owner == ptr)) {
            // only move the pointer if we actually own it through uniquePtr2
            owner = new U(UNIQUE_PTR_NAMESPACE::move(uniquePtr));
        }
        return (typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator U&() const { return uniquePtr; }
    operator U&&() { return UNIQUE_PTR_NAMESPACE::move(uniquePtr); }
    operator U*() { return &uniquePtr; }
    T* ptr;
    size_t size;
    void* owner;
    U uniquePtr2;
    U& uniquePtr;
};
#endif

#if __cplusplus >= 201103L || _MSC_VER >= 1900
#include <utility>
template<class T> class MoveAdapter {
public:
    MoveAdapter(const T* ptr, size_t size, void* owner) : ptr(&movedPtr), size(size), owner(owner), movedPtr(std::move(*(T*)ptr)) { }
    MoveAdapter(const T& ptr) : ptr(&movedPtr), size(0), owner(0), movedPtr(std::move((T&)ptr)) { }
    MoveAdapter(T&& ptr) : ptr(&movedPtr), size(0), owner(0), movedPtr((T&&)ptr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = &this->movedPtr;
        this->size = size;
        this->owner = owner;
        this->movedPtr = std::move(*ptr);
    }
    static void deallocate(void* owner) { delete (T*)owner; }
    operator T*() {
        ptr = new T(std::move(movedPtr));
        owner = ptr;
        return ptr;
    }
    operator const T*() { return ptr; }
    operator T&&() { return std::move(movedPtr); }
    T* ptr;
    size_t size;
    void* owner;
    T movedPtr;
};
#endif




static void JavaCPP_com_helixd2s_valera_ValerACore_00024Framebuffer_deallocate(void *p) { delete (::vlr::Framebuffer*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineLayout_deallocate(void *p) { delete (::vlr::PipelineLayout*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024Rasterization_deallocate(void *p) { delete (::vlr::Rasterization*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracing_deallocate(void *p) { delete (::vlr::RayTracing*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommand_deallocate(void *p) { delete (::vlr::BuildCommand*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommand_deallocate(void *p) { delete (::vlr::RenderCommand*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024SamplerSet_deallocate(void *p) { delete (::vlr::SamplerSet*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024TextureSet_deallocate(void *p) { delete (::vlr::TextureSet*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024BufferViewSet_deallocate(void *p) { delete (::vlr::BufferViewSet*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024Background_deallocate(void *p) { delete (::vlr::Background*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024GeometrySet_deallocate(void *p) { delete (::vlr::GeometrySet*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024Geometry_deallocate(void *p) { delete (::vlr::Geometry*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024Acceleration_deallocate(void *p) { delete (::vlr::Acceleration*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSet_deallocate(void *p) { delete (::vlr::VertexSet*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024SetBase_deallocate(void *p) { delete (::vlr::SetBase*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_deallocate(void *p) { delete (::vlr::RayTracingCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_deallocate(void *p) { delete (::vlr::PipelineCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineStages_deallocate(void *p) { delete (::vlr::PipelineStages*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024ConstantDesc_deallocate(void *p) { delete (::vlr::ConstantDesc*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024GeometryDesc_deallocate(void *p) { delete (::vlr::GeometryDesc*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_deallocate(void *p) { delete (::vkh::VsGeometryInstance*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_deallocate(void *p) { delete (::vlr::BuildCommandCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_deallocate(void *p) { delete (::vlr::RenderCommandCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_deallocate(void *p) { delete (::vlr::VertexSetCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_deallocate(void *p) { delete (::vlr::DataSetCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_deallocate(void *p) { delete (::vlr::AccelerationCreateInfo*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024MaterialUnit_deallocate(void *p) { delete (::vlr::MaterialUnit*)p; }
static void JavaCPP_com_helixd2s_valera_ValerACore_00024Driver_deallocate(void *p) { delete (::vlj::Driver*)p; }

static const char* JavaCPP_members[47][12] = {
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "constants", "framebuffer", "layout", "accelerationTop" },
        { NULL },
        { "sizeof" },
        { "sizeof", "constants", "translucent", "framebuffer", "instanceSet", "opaque", "layout" },
        { "sizeof", "vertexShader", "geometryShader", "fragmentShader" },
        { "sizeof" },
        { "sizeof", "modelviewInv", "rdata", "modelview", "modelviewPrev", "projection", "projectionInv", "modelviewPrevInv", "tdata", "mdata" },
        { NULL },
        { NULL },
        { "sizeof", "transform", "primitiveCount", "attributes", "mesh_flags", "firstVertex", "indexBufferView", "reserved", "vertexAttribute", "indexType", "material" },
        { NULL },
        { "sizeof", "transform", "accelerationStructureHandle" },
        { NULL },
        { "sizeof", "layout", "accelerationTop" },
        { "sizeof", "layout", "rayTracing", "rasterization" },
        { "sizeof", "attributes", "bindings", "bufferViews" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "count", "enableGL", "enableCPU", "uniform" },
        { "sizeof", "instanceSet", "geometrySet", "initials" },
        { "sizeof", "normal", "diffuseTexture", "udata", "diffuse", "pbrAGMTexture", "normalTexture", "emissionTexture", "emission", "pbrAGM" },
        { "sizeof" },
        { NULL },
        { NULL },
        { NULL } };
static int JavaCPP_offsets[47][12] = {
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(::vlr::Framebuffer) },
        { -1 },
        { sizeof(::vlr::PipelineLayout) },
        { sizeof(::vlr::Rasterization) },
        { sizeof(::vlr::RayTracing) },
        { sizeof(::vlr::BuildCommand) },
        { sizeof(::vlr::RenderCommand) },
        { sizeof(::vlr::SamplerSet) },
        { sizeof(::vlr::TextureSet) },
        { sizeof(::vlr::BufferViewSet) },
        { sizeof(::vlr::Background) },
        { sizeof(::vlr::GeometrySet) },
        { sizeof(::vlr::Geometry) },
        { sizeof(::vlr::Acceleration) },
        { sizeof(::vlr::VertexSet) },
        { sizeof(::vlr::SetBase) },
        { sizeof(::vlr::RayTracingCreateInfo), offsetof(::vlr::RayTracingCreateInfo, constants), offsetof(::vlr::RayTracingCreateInfo, framebuffer), offsetof(::vlr::RayTracingCreateInfo, layout), offsetof(::vlr::RayTracingCreateInfo, accelerationTop) },
        { -1 },
        { sizeof(::vlr::Constants) },
        { sizeof(::vlr::PipelineCreateInfo), offsetof(::vlr::PipelineCreateInfo, constants), offsetof(::vlr::PipelineCreateInfo, translucent), offsetof(::vlr::PipelineCreateInfo, framebuffer), offsetof(::vlr::PipelineCreateInfo, instanceSet), offsetof(::vlr::PipelineCreateInfo, opaque), offsetof(::vlr::PipelineCreateInfo, layout) },
        { sizeof(::vlr::PipelineStages), offsetof(::vlr::PipelineStages, vertexShader), offsetof(::vlr::PipelineStages, geometryShader), offsetof(::vlr::PipelineStages, fragmentShader) },
        { sizeof(::vlr::InstanceSet) },
        { sizeof(::vlr::ConstantDesc), offsetof(::vlr::ConstantDesc, modelviewInv), offsetof(::vlr::ConstantDesc, rdata), offsetof(::vlr::ConstantDesc, modelview), offsetof(::vlr::ConstantDesc, modelviewPrev), offsetof(::vlr::ConstantDesc, projection), offsetof(::vlr::ConstantDesc, projectionInv), offsetof(::vlr::ConstantDesc, modelviewPrevInv), offsetof(::vlr::ConstantDesc, tdata), offsetof(::vlr::ConstantDesc, mdata) },
        { -1 },
        { -1 },
        { sizeof(::vlr::GeometryDesc), offsetof(::vlr::GeometryDesc, transform), offsetof(::vlr::GeometryDesc, primitiveCount), offsetof(::vlr::GeometryDesc, attributes), offsetof(::vlr::GeometryDesc, mesh_flags), offsetof(::vlr::GeometryDesc, firstVertex), offsetof(::vlr::GeometryDesc, indexBufferView), offsetof(::vlr::GeometryDesc, reserved), offsetof(::vlr::GeometryDesc, vertexAttribute), offsetof(::vlr::GeometryDesc, indexType), offsetof(::vlr::GeometryDesc, material) },
        { -1 },
        { sizeof(::vkh::VsGeometryInstance), offsetof(::vkh::VsGeometryInstance, transform), offsetof(::vkh::VsGeometryInstance, accelerationStructureHandle) },
        { -1 },
        { sizeof(::vlr::BuildCommandCreateInfo), offsetof(::vlr::BuildCommandCreateInfo, layout), offsetof(::vlr::BuildCommandCreateInfo, accelerationTop) },
        { sizeof(::vlr::RenderCommandCreateInfo), offsetof(::vlr::RenderCommandCreateInfo, layout), offsetof(::vlr::RenderCommandCreateInfo, rayTracing), offsetof(::vlr::RenderCommandCreateInfo, rasterization) },
        { sizeof(::vlr::VertexSetCreateInfo), offsetof(::vlr::VertexSetCreateInfo, attributes), offsetof(::vlr::VertexSetCreateInfo, bindings), offsetof(::vlr::VertexSetCreateInfo, bufferViews) },
        { sizeof(::vlr::AttributeSet) },
        { sizeof(::vlr::BindingSet) },
        { sizeof(::vlr::DataSetCreateInfo), offsetof(::vlr::DataSetCreateInfo, count), offsetof(::vlr::DataSetCreateInfo, enableGL), offsetof(::vlr::DataSetCreateInfo, enableCPU), offsetof(::vlr::DataSetCreateInfo, uniform) },
        { sizeof(::vlr::AccelerationCreateInfo), offsetof(::vlr::AccelerationCreateInfo, instanceSet), offsetof(::vlr::AccelerationCreateInfo, geometrySet), offsetof(::vlr::AccelerationCreateInfo, initials) },
        { sizeof(::vlr::MaterialUnit), offsetof(::vlr::MaterialUnit, normal), offsetof(::vlr::MaterialUnit, diffuseTexture), offsetof(::vlr::MaterialUnit, udata), offsetof(::vlr::MaterialUnit, diffuse), offsetof(::vlr::MaterialUnit, pbrAGMTexture), offsetof(::vlr::MaterialUnit, normalTexture), offsetof(::vlr::MaterialUnit, emissionTexture), offsetof(::vlr::MaterialUnit, emission), offsetof(::vlr::MaterialUnit, pbrAGM) },
        { sizeof(::vlj::Driver) },
        { -1 },
        { -1 },
        { -1 } };
static int JavaCPP_memberOffsetSizes[47] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 7, 4, 1, 10, 1, 1, 11, 1, 3, 1, 3, 4, 4, 1, 1, 5, 4, 10, 1, 1, 1, 1 };

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad_jnijavacpp(JavaVM* vm, void* reserved);
JNIEXPORT void JNICALL JNI_OnUnload_jnijavacpp(JavaVM* vm, void* reserved);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    if (JNI_OnLoad_jnijavacpp(vm, reserved) == JNI_ERR) {
        return JNI_ERR;
    }
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 3, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 47 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < JavaCPP_memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = JavaCPP_members[i][j] == NULL ? NULL : env->NewStringUTF(JavaCPP_members[i][j]);
                args[2].i = JavaCPP_offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 3), putMemberOffsetMID, args);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = cls == NULL ? NULL : (jclass)env->NewWeakGlobalRef(cls);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 2, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 4, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayOffsetMID = JavaCPP_getMethodID(env, 4, "arrayOffset", "()I");
    if (JavaCPP_arrayOffsetMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferPositionFID = JavaCPP_getFieldID(env, 4, "position", "I");
    if (JavaCPP_bufferPositionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferLimitFID = JavaCPP_getFieldID(env, 4, "limit", "I");
    if (JavaCPP_bufferLimitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferCapacityFID = JavaCPP_getFieldID(env, 4, "capacity", "I");
    if (JavaCPP_bufferCapacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 1, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 1, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 5, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 47; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JNI_OnUnload_jnijavacpp(vm, reserved);
    JavaCPP_vm = NULL;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Framebuffer_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::Framebuffer* rptr = new ::vlr::Framebuffer();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Framebuffer_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Framebuffer_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::Framebuffer* rptr = new ::vlr::Framebuffer(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Framebuffer_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineLayout_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::PipelineLayout* rptr = new ::vlr::PipelineLayout();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineLayout_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineLayout_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::PipelineLayout* rptr = new ::vlr::PipelineLayout(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineLayout_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Rasterization_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::Rasterization* rptr = new ::vlr::Rasterization(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Rasterization_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Rasterization_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024PipelineCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::PipelineCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::Rasterization* rptr = new ::vlr::Rasterization(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Rasterization_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Rasterization_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::Rasterization* rptr = new ::vlr::Rasterization();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Rasterization_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracing_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::RayTracing* rptr = new ::vlr::RayTracing(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracing_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracing_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::RayTracingCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::RayTracing* rptr = new ::vlr::RayTracing(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracing_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracing_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::RayTracing* rptr = new ::vlr::RayTracing();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracing_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommand_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::BuildCommand* rptr = new ::vlr::BuildCommand(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommand_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::BuildCommandCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::BuildCommandCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::BuildCommand* rptr = new ::vlr::BuildCommand(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommand_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::BuildCommand* rptr = new ::vlr::BuildCommand();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommand_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::RenderCommand* rptr = new ::vlr::RenderCommand(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommand_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::RenderCommandCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::RenderCommand* rptr = new ::vlr::RenderCommand(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommand_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::RenderCommand* rptr = new ::vlr::RenderCommand();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommand_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024SamplerSet_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::SamplerSet* rptr = new ::vlr::SamplerSet();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024SamplerSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024SamplerSet_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::SamplerSet* rptr = new ::vlr::SamplerSet(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024SamplerSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024TextureSet_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::TextureSet* rptr = new ::vlr::TextureSet();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024TextureSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024TextureSet_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::TextureSet* rptr = new ::vlr::TextureSet(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024TextureSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BufferViewSet_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::BufferViewSet* rptr = new ::vlr::BufferViewSet();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BufferViewSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BufferViewSet_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::BufferViewSet* rptr = new ::vlr::BufferViewSet(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BufferViewSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Background_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::Background* rptr = new ::vlr::Background(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Background_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Background_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_VKt_00024ImageRegion_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vkt::ImageRegion* ptr1 = arg1 == NULL ? NULL : (::vkt::ImageRegion*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::Background* rptr = new ::vlr::Background(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Background_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Background_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::Background* rptr = new ::vlr::Background();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Background_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometrySet_allocate__Lcom_helixd2s_valera_ValerACore_00024VertexSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::VertexSet* ptr0 = arg0 == NULL ? NULL : (::vlr::VertexSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ::vlr::GeometrySet* rptr = new ::vlr::GeometrySet(ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024GeometrySet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometrySet_allocate__Lcom_helixd2s_valera_ValerACore_00024VertexSet_2Lcom_helixd2s_valera_ValerACore_00024DataSetCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vlr::VertexSet* ptr0 = arg0 == NULL ? NULL : (::vlr::VertexSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ::vlr::DataSetCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::GeometrySet* rptr = new ::vlr::GeometrySet(ptr0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024GeometrySet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometrySet_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::GeometrySet* rptr = new ::vlr::GeometrySet();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024GeometrySet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Geometry_allocate__Lcom_helixd2s_valera_ValerACore_00024VertexSet_2Lcom_helixd2s_valera_ValerACore_00024GeometryDesc_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vlr::VertexSet* ptr0 = arg0 == NULL ? NULL : (::vlr::VertexSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::VertexSet > adapter0(ptr0, size0, owner0);
    ::vlr::GeometryDesc* ptr1 = arg1 == NULL ? NULL : (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::Geometry* rptr = new ::vlr::Geometry(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Geometry_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vlr::VertexSet* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vlr::VertexSet >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Geometry_allocate__Lcom_helixd2s_valera_ValerACore_00024VertexSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::VertexSet* ptr0 = arg0 == NULL ? NULL : (::vlr::VertexSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::VertexSet > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::Geometry* rptr = new ::vlr::Geometry(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Geometry_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vlr::VertexSet* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vlr::VertexSet >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Geometry_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::Geometry* rptr = new ::vlr::Geometry();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Geometry_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Acceleration_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::AccelerationCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::Acceleration* rptr = new ::vlr::Acceleration(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Acceleration_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Acceleration_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::Acceleration* rptr = new ::vlr::Acceleration(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Acceleration_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Acceleration_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::Acceleration* rptr = new ::vlr::Acceleration();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Acceleration_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSet_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::VertexSet* rptr = new ::vlr::VertexSet(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSet_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::VertexSetCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::VertexSet* rptr = new ::vlr::VertexSet(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSet_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::VertexSet* rptr = new ::vlr::VertexSet();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSet_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}






JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024SetBase_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlr::SetBase* rptr = new ::vlr::SetBase(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024SetBase_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024SetBase_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2Lcom_helixd2s_valera_ValerACore_00024DataSetCreateInfo_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    ::vlr::DataSetCreateInfo* ptr1 = arg1 == NULL ? NULL : (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::vlr::SetBase* rptr = new ::vlr::SetBase(adapter0, ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024SetBase_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024SetBase_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::SetBase* rptr = new ::vlr::SetBase();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024SetBase_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::RayTracingCreateInfo* rptr = new ::vlr::RayTracingCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_constants__Lcom_helixd2s_valera_ValerACore_00024Constants_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Constants* ptr0 = arg0 == NULL ? NULL : (::vlr::Constants*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Constants > adapter0(ptr0, size0, owner0);
    ptr->constants = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_constants__(JNIEnv* env, jobject obj) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Constants* rptr;
    vkt::uni_ptr< ::vlr::Constants > radapter(ptr->constants);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Constants >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 24);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_framebuffer__(JNIEnv* env, jobject obj) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Framebuffer* rptr;
    vkt::uni_ptr< ::vlr::Framebuffer > radapter(ptr->framebuffer);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Framebuffer >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 6);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_framebuffer__Lcom_helixd2s_valera_ValerACore_00024Framebuffer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Framebuffer* ptr0 = arg0 == NULL ? NULL : (::vlr::Framebuffer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Framebuffer > adapter0(ptr0, size0, owner0);
    ptr->framebuffer = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_layout__(JNIEnv* env, jobject obj) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineLayout* rptr;
    vkt::uni_ptr< ::vlr::PipelineLayout > radapter(ptr->layout);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::PipelineLayout >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 8);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_layout__Lcom_helixd2s_valera_ValerACore_00024PipelineLayout_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineLayout* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineLayout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::PipelineLayout > adapter0(ptr0, size0, owner0);
    ptr->layout = adapter0;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_accelerationTop__Lcom_helixd2s_valera_ValerACore_00024Acceleration_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Acceleration* ptr0 = arg0 == NULL ? NULL : (::vlr::Acceleration*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Acceleration > adapter0(ptr0, size0, owner0);
    ptr->accelerationTop = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RayTracingCreateInfo_accelerationTop__(JNIEnv* env, jobject obj) {
    ::vlr::RayTracingCreateInfo* ptr = (::vlr::RayTracingCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Acceleration* rptr;
    vkt::uni_ptr< ::vlr::Acceleration > radapter(ptr->accelerationTop);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Acceleration >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 19);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::PipelineCreateInfo* rptr = new ::vlr::PipelineCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_constants__Lcom_helixd2s_valera_ValerACore_00024Constants_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Constants* ptr0 = arg0 == NULL ? NULL : (::vlr::Constants*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Constants > adapter0(ptr0, size0, owner0);
    ptr->constants = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_constants__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Constants* rptr;
    vkt::uni_ptr< ::vlr::Constants > radapter(ptr->constants);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Constants >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 24);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_translucent__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineStages* rptr;
    rptr = &ptr->translucent;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 26);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_translucent__Lcom_helixd2s_valera_ValerACore_00024PipelineStages_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineStages* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ptr->translucent = *ptr0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_framebuffer__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Framebuffer* rptr;
    vkt::uni_ptr< ::vlr::Framebuffer > radapter(ptr->framebuffer);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Framebuffer >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 6);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_framebuffer__Lcom_helixd2s_valera_ValerACore_00024Framebuffer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Framebuffer* ptr0 = arg0 == NULL ? NULL : (::vlr::Framebuffer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Framebuffer > adapter0(ptr0, size0, owner0);
    ptr->framebuffer = adapter0;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_instanceSet__Lcom_helixd2s_valera_ValerACore_00024InstanceSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::InstanceSet* ptr0 = arg0 == NULL ? NULL : (::vlr::InstanceSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::InstanceSet > adapter0(ptr0, size0, owner0);
    ptr->instanceSet = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_instanceSet__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::InstanceSet* rptr;
    vkt::uni_ptr< ::vlr::InstanceSet > radapter(ptr->instanceSet);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::InstanceSet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 27);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_opaque__Lcom_helixd2s_valera_ValerACore_00024PipelineStages_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineStages* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ptr->opaque = *ptr0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_opaque__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineStages* rptr;
    rptr = &ptr->opaque;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 26);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_layout__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineLayout* rptr;
    vkt::uni_ptr< ::vlr::PipelineLayout > radapter(ptr->layout);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::PipelineLayout >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 8);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineCreateInfo_layout__Lcom_helixd2s_valera_ValerACore_00024PipelineLayout_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::PipelineCreateInfo* ptr = (::vlr::PipelineCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineLayout* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineLayout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::PipelineLayout > adapter0(ptr0, size0, owner0);
    ptr->layout = adapter0;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::PipelineStages* rptr = new ::vlr::PipelineStages();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024PipelineStages_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_vertexShader__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    ptr->vertexShader = (std::basic_string< char >&)adapter0;
    JavaCPP_releaseStringBytes(env, arg0, ptr0);
}
JNIEXPORT jstring JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_vertexShader__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jstring rarg = NULL;
    const char* rptr;
    StringAdapter< char > radapter(ptr->vertexShader);
    rptr = radapter;
    if (rptr != NULL) {
        rarg = JavaCPP_createString(env, rptr);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_geometryShader__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jstring rarg = NULL;
    const char* rptr;
    StringAdapter< char > radapter(ptr->geometryShader);
    rptr = radapter;
    if (rptr != NULL) {
        rarg = JavaCPP_createString(env, rptr);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_geometryShader__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    ptr->geometryShader = (std::basic_string< char >&)adapter0;
    JavaCPP_releaseStringBytes(env, arg0, ptr0);
}
JNIEXPORT jstring JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_fragmentShader__(JNIEnv* env, jobject obj) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jstring rarg = NULL;
    const char* rptr;
    StringAdapter< char > radapter(ptr->fragmentShader);
    rptr = radapter;
    if (rptr != NULL) {
        rarg = JavaCPP_createString(env, rptr);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024PipelineStages_fragmentShader__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    ::vlr::PipelineStages* ptr = (::vlr::PipelineStages*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    ptr->fragmentShader = (std::basic_string< char >&)adapter0;
    JavaCPP_releaseStringBytes(env, arg0, ptr0);
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::ConstantDesc* rptr = new ::vlr::ConstantDesc();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024ConstantDesc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_modelviewInv(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->modelviewInv;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_rdata(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->rdata;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_modelview(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->modelview;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_modelviewPrev(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->modelviewPrev;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_projection(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->projection;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_projectionInv(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->projectionInv;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_modelviewPrevInv(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->modelviewPrevInv;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_tdata(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->tdata;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024ConstantDesc_mdata(JNIEnv* env, jobject obj) {
    ::vlr::ConstantDesc* ptr = (::vlr::ConstantDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->mdata;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::GeometryDesc* rptr = new ::vlr::GeometryDesc();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024GeometryDesc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_transform(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->transform;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_first(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    byte* rptr;
    rptr = (byte*)&ptr->transform;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_primitiveCount(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->primitiveCount;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_attributes(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->attributes;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_mesh_1flags(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    rptr = (int8_t*)&ptr->mesh_flags;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_firstVertex(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->firstVertex;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_indexBufferView(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->indexBufferView;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_reserved(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->reserved;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_vertexAttribute(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->vertexAttribute;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_indexType(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->indexType;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024GeometryDesc_material(JNIEnv* env, jobject obj) {
    ::vlr::GeometryDesc* ptr = (::vlr::GeometryDesc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->material;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vkh::VsGeometryInstance* rptr = new ::vkh::VsGeometryInstance();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_transform(JNIEnv* env, jobject obj) {
    ::vkh::VsGeometryInstance* ptr = (::vkh::VsGeometryInstance*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->transform;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_first(JNIEnv* env, jobject obj) {
    ::vkh::VsGeometryInstance* ptr = (::vkh::VsGeometryInstance*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    byte* rptr;
    rptr = (byte*)&ptr->transform;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VsGeometryInstance_accelerationStructureHandle(JNIEnv* env, jobject obj) {
    ::vkh::VsGeometryInstance* ptr = (::vkh::VsGeometryInstance*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    long* rptr;
    rptr = (long*)&ptr->accelerationStructureHandle;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 34);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::BuildCommandCreateInfo* rptr = new ::vlr::BuildCommandCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_layout__(JNIEnv* env, jobject obj) {
    ::vlr::BuildCommandCreateInfo* ptr = (::vlr::BuildCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineLayout* rptr;
    vkt::uni_ptr< ::vlr::PipelineLayout > radapter(ptr->layout);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::PipelineLayout >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 8);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_layout__Lcom_helixd2s_valera_ValerACore_00024PipelineLayout_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::BuildCommandCreateInfo* ptr = (::vlr::BuildCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineLayout* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineLayout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::PipelineLayout > adapter0(ptr0, size0, owner0);
    ptr->layout = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_accelerationTop__(JNIEnv* env, jobject obj) {
    ::vlr::BuildCommandCreateInfo* ptr = (::vlr::BuildCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Acceleration* rptr;
    vkt::uni_ptr< ::vlr::Acceleration > radapter(ptr->accelerationTop);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Acceleration >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 19);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024BuildCommandCreateInfo_accelerationTop__Lcom_helixd2s_valera_ValerACore_00024Acceleration_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::BuildCommandCreateInfo* ptr = (::vlr::BuildCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Acceleration* ptr0 = arg0 == NULL ? NULL : (::vlr::Acceleration*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Acceleration > adapter0(ptr0, size0, owner0);
    ptr->accelerationTop = adapter0;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::RenderCommandCreateInfo* rptr = new ::vlr::RenderCommandCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_layout__(JNIEnv* env, jobject obj) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::PipelineLayout* rptr;
    vkt::uni_ptr< ::vlr::PipelineLayout > radapter(ptr->layout);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::PipelineLayout >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 8);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_layout__Lcom_helixd2s_valera_ValerACore_00024PipelineLayout_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::PipelineLayout* ptr0 = arg0 == NULL ? NULL : (::vlr::PipelineLayout*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::PipelineLayout > adapter0(ptr0, size0, owner0);
    ptr->layout = adapter0;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_rayTracing__Lcom_helixd2s_valera_ValerACore_00024RayTracing_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::RayTracing* ptr0 = arg0 == NULL ? NULL : (::vlr::RayTracing*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::RayTracing > adapter0(ptr0, size0, owner0);
    ptr->rayTracing = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_rayTracing__(JNIEnv* env, jobject obj) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::RayTracing* rptr;
    vkt::uni_ptr< ::vlr::RayTracing > radapter(ptr->rayTracing);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::RayTracing >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 10);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_rasterization__Lcom_helixd2s_valera_ValerACore_00024Rasterization_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::Rasterization* ptr0 = arg0 == NULL ? NULL : (::vlr::Rasterization*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::Rasterization > adapter0(ptr0, size0, owner0);
    ptr->rasterization = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024RenderCommandCreateInfo_rasterization__(JNIEnv* env, jobject obj) {
    ::vlr::RenderCommandCreateInfo* ptr = (::vlr::RenderCommandCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::Rasterization* rptr;
    vkt::uni_ptr< ::vlr::Rasterization > radapter(ptr->rasterization);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::Rasterization >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 9);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::VertexSetCreateInfo* rptr = new ::vlr::VertexSetCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_attributes__Lcom_helixd2s_valera_ValerACore_00024AttributeSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::AttributeSet* ptr0 = arg0 == NULL ? NULL : (::vlr::AttributeSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::AttributeSet > adapter0(ptr0, size0, owner0);
    ptr->attributes = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_attributes__(JNIEnv* env, jobject obj) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::AttributeSet* rptr;
    vkt::uni_ptr< ::vlr::AttributeSet > radapter(ptr->attributes);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::AttributeSet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 38);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_bindings__(JNIEnv* env, jobject obj) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::BindingSet* rptr;
    vkt::uni_ptr< ::vlr::BindingSet > radapter(ptr->bindings);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::BindingSet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 39);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_bindings__Lcom_helixd2s_valera_ValerACore_00024BindingSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::BindingSet* ptr0 = arg0 == NULL ? NULL : (::vlr::BindingSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::BindingSet > adapter0(ptr0, size0, owner0);
    ptr->bindings = adapter0;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_bufferViews__Lcom_helixd2s_valera_ValerACore_00024BufferViewSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::BufferViewSet* ptr0 = arg0 == NULL ? NULL : (::vlr::BufferViewSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::BufferViewSet > adapter0(ptr0, size0, owner0);
    ptr->bufferViews = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024VertexSetCreateInfo_bufferViews__(JNIEnv* env, jobject obj) {
    ::vlr::VertexSetCreateInfo* ptr = (::vlr::VertexSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::BufferViewSet* rptr;
    vkt::uni_ptr< ::vlr::BufferViewSet > radapter(ptr->bufferViews);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::BufferViewSet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 15);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::DataSetCreateInfo* rptr = new ::vlr::DataSetCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_count(JNIEnv* env, jobject obj) {
    ::vlr::DataSetCreateInfo* ptr = (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    long* rptr;
    rptr = (long*)&ptr->count;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 34);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_enableGL(JNIEnv* env, jobject obj) {
    ::vlr::DataSetCreateInfo* ptr = (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    rptr = (int8_t*)&ptr->enableGL;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_enableCPU(JNIEnv* env, jobject obj) {
    ::vlr::DataSetCreateInfo* ptr = (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    rptr = (int8_t*)&ptr->enableCPU;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024DataSetCreateInfo_uniform(JNIEnv* env, jobject obj) {
    ::vlr::DataSetCreateInfo* ptr = (::vlr::DataSetCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    rptr = (int8_t*)&ptr->uniform;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 32);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::AccelerationCreateInfo* rptr = new ::vlr::AccelerationCreateInfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_instanceSet__(JNIEnv* env, jobject obj) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::InstanceSet* rptr;
    vkt::uni_ptr< ::vlr::InstanceSet > radapter(ptr->instanceSet);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::InstanceSet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 27);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_instanceSet__Lcom_helixd2s_valera_ValerACore_00024InstanceSet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::InstanceSet* ptr0 = arg0 == NULL ? NULL : (::vlr::InstanceSet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::InstanceSet > adapter0(ptr0, size0, owner0);
    ptr->instanceSet = adapter0;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_geometrySet__Lcom_helixd2s_valera_ValerACore_00024GeometrySet_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::vlr::GeometrySet* ptr0 = arg0 == NULL ? NULL : (::vlr::GeometrySet*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vlr::GeometrySet > adapter0(ptr0, size0, owner0);
    ptr->geometrySet = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_geometrySet__(JNIEnv* env, jobject obj) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vlr::GeometrySet* rptr;
    vkt::uni_ptr< ::vlr::GeometrySet > radapter(ptr->geometrySet);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vlr::GeometrySet >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 17);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_initials__Lorg_bytedeco_javacpp_LongPointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    VectorAdapter< jlong > adapter0(ptr0, size0, owner0);
    ptr->initials = adapter0;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024AccelerationCreateInfo_initials__(JNIEnv* env, jobject obj) {
    ::vlr::AccelerationCreateInfo* ptr = (::vlr::AccelerationCreateInfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    jlong* rptr;
    VectorAdapter< jlong > radapter(ptr->initials);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &VectorAdapter< jlong >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 34);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlr::MaterialUnit* rptr = new ::vlr::MaterialUnit();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024MaterialUnit_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_normal(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->normal;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_diffuseTexture(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->diffuseTexture;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_udata(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->udata;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_diffuse(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->diffuse;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_pbrAGMTexture(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->pbrAGMTexture;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_normalTexture(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->normalTexture;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_emissionTexture(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    rptr = (int*)&ptr->emissionTexture;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 30);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_emission(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->emission;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024MaterialUnit_pbrAGM(JNIEnv* env, jobject obj) {
    ::vlr::MaterialUnit* ptr = (::vlr::MaterialUnit*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    float* rptr;
    rptr = (float*)&ptr->pbrAGM;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 29);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::vlj::Driver* rptr = new ::vlj::Driver();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Driver_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_allocate__Lcom_helixd2s_valera_VKt_00024Driver_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::vkt::GPUFramework* ptr0 = arg0 == NULL ? NULL : (::vkt::GPUFramework*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    vkt::uni_ptr< ::vkt::GPUFramework > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ::vlj::Driver* rptr = new ::vlj::Driver(adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_com_helixd2s_valera_ValerACore_00024Driver_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ::vkt::GPUFramework* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getInstance(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getQueue(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getQueue();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_createInstance(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->createInstance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getFence(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getFence();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver__1getMemoryProperties(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (int8_t*)&ptr->getMemoryProperties();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getInstanceDispatch(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::xvk::Instance* rptr;
    jthrowable exc = NULL;
    try {
        vkt::uni_ptr< ::xvk::Instance > radapter(ptr->getInstanceDispatch());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::xvk::Instance >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_memoryAllocationInfoPtr(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->memoryAllocationInfoPtr();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getInstanceCreateInfoAddress(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->getInstanceCreateInfoAddress();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDeviceCreateInfoAddress(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->getDeviceCreateInfoAddress();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver__1getAllocator(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int8_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (int8_t*)&ptr->getAllocator();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 32);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_sharedPtr(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        SharedPtrAdapter< ::vkt::GPUFramework > radapter(ptr->sharedPtr());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &SharedPtrAdapter< ::vkt::GPUFramework >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDeviceDispatch(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::xvk::Device* rptr;
    jthrowable exc = NULL;
    try {
        vkt::uni_ptr< ::xvk::Device > radapter(ptr->getDeviceDispatch());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::xvk::Device >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 46);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_loadXVK(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->loadXVK();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getPhysicalDevice__I(JNIEnv* env, jobject obj, jint arg0) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getPhysicalDevice(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getPhysicalDevice__(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getPhysicalDevice();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getCommandPool(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getCommandPool();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDescriptorPool(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getDescriptorPool();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDepthImage(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getDepthImage();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDevice(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getDevice();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_submitCmd___3JJ(JNIEnv* env, jobject obj, jlongArray arg0, jlong arg1) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : env->GetLongArrayElements(arg0, NULL);
    jlong size0 = arg0 == NULL ? 0 : env->GetArrayLength(arg0);
    void* owner0 = (void*)ptr0;
    VectorAdapter< jlong > adapter0(ptr0, size0, owner0);
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->submitCmd(adapter0, (vkh::VkSubmitInfo*)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    jlong* rptr0 = adapter0;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        VectorAdapter< jlong >::deallocate(rowner0);
    }
    if (arg0 != NULL) env->ReleaseLongArrayElements(arg0, (jlong*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_submitCmd__JJ(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->submitCmd((VkCommandBuffer)arg0, (vkh::VkSubmitInfo*)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getSwapchain(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getSwapchain();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getPipelineCache(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getPipelineCache();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getRenderPass(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getRenderPass();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_createDevice__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->createDevice((VkPhysicalDevice)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_createDevice__(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->createDevice();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getDepthImageView(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getDepthImageView();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_submitUtilize___3JJ(JNIEnv* env, jobject obj, jlongArray arg0, jlong arg1) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : env->GetLongArrayElements(arg0, NULL);
    jlong size0 = arg0 == NULL ? 0 : env->GetArrayLength(arg0);
    void* owner0 = (void*)ptr0;
    VectorAdapter< jlong > adapter0(ptr0, size0, owner0);
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->submitUtilize(adapter0, (vkh::VkSubmitInfo*)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    jlong* rptr0 = adapter0;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        VectorAdapter< jlong >::deallocate(rowner0);
    }
    if (arg0 != NULL) env->ReleaseLongArrayElements(arg0, (jlong*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_submitUtilize__JJ(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->submitUtilize((VkCommandBuffer)arg0, (vkh::VkSubmitInfo*)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_getSurface(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uintptr_t* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (uintptr_t*)&ptr->getSurface();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_com_helixd2s_valera_ValerACore_00024Driver_uniPtr(JNIEnv* env, jobject obj) {
    ::vlj::Driver* ptr = (::vlj::Driver*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 23), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::vkt::GPUFramework* rptr;
    jthrowable exc = NULL;
    try {
        vkt::uni_ptr< ::vkt::GPUFramework > radapter(ptr->uniPtr());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &vkt::uni_ptr< ::vkt::GPUFramework >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 45);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}


}

